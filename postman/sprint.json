{
	"info": {
		"_postman_id": "069d256e-037e-4bd9-a5de-be6910726adc",
		"name": "Sprint 15 ShareIt (add-bookings)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23073145",
		"_collection_link": "https://universal-shadow-295426.postman.co/workspace/My-Workspace~4200f6aa-0504-44b1-8a1d-707d0dcbd5ce/collection/13708500-069d256e-037e-4bd9-a5de-be6910726adc?action=share&source=collection_link&creator=23073145"
	},
	"item": [
		{
			"name": "users",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        user = rnd.getUser();\r",
									"        pm.collectionVariables.set(\"userName\", user.name);\r",
									"        pm.collectionVariables.set(\"userEmail\", user.email);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"pm.test(\"Response have body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{userName}}\",\n    \"email\": \"{{userEmail}}\"\n}"
						},
						"url": {
							"raw": "localhost:8080/users",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user without email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        user2 = rnd.getUser();\r",
									"        pm.collectionVariables.set(\"userName\", user2.name);\r",
									"        pm.collectionVariables.set(\"userEmail\", user2.email);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 500]);\r",
									"});\r",
									"pm.test(\"Response have body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{userName}}\"\n}"
						},
						"url": {
							"raw": "localhost:8080/users",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create 2 users with same email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        user1 = rnd.getUser();\r",
									"        us = await api.addUser(user1);\r",
									"        user2 = rnd.getUser();\r",
									"        user2.email = user1.email;\r",
									"        pm.collectionVariables.set(\"userName\", user2.name);\r",
									"        pm.collectionVariables.set(\"userEmail\", user2.email);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([409, 500]);\r",
									"});\r",
									"pm.test(\"Response have body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{userName}}\",\n    \"email\": \"{{userEmail}}\"\n}"
						},
						"url": {
							"raw": "localhost:8080/users",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with invalid email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        user = rnd.getUser();\r",
									"        pm.collectionVariables.set(\"userName\", user.name);\r",
									"        pm.collectionVariables.set(\"userEmail\", user.email);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 500]);\r",
									"});\r",
									"pm.test(\"Response have body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{userName}}\",\n    \"email\": \"user.com\"\n}"
						},
						"url": {
							"raw": "localhost:8080/users",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "User update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        user = rnd.getUser();\r",
									"        us = await api.addUser(user);\r",
									"        pm.collectionVariables.set(\"userId\", us.id);\r",
									"        us = rnd.getUser()\r",
									"        pm.collectionVariables.set(\"userName\", us.name);\r",
									"        pm.collectionVariables.set(\"userEmail\", us.email);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Response have body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test user 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    var id = pm.collectionVariables.get(\"userId\");\r",
									"    pm.expect(jsonData.id, '\"id\" must be ' + id).to.eql(Number(id));\r",
									"});\r",
									"pm.test(\"Test user 'email' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"    var email = pm.collectionVariables.get(\"userEmail\");\r",
									"    pm.expect(jsonData.email, '\"email\" must be ' + email).to.eql(email);\r",
									"});\r",
									"pm.test(\"Test user 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    var name = pm.collectionVariables.get(\"userName\");\r",
									"    pm.expect(jsonData.name, '\"name\" must be ' + name).to.eql(name);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{userName}}\",\n    \"email\": \"{{userEmail}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User update name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        user = rnd.getUser();\r",
									"        us = await api.addUser(user);\r",
									"        pm.collectionVariables.set(\"userId\", us.id);\r",
									"        us = rnd.getUser()\r",
									"        pm.collectionVariables.set(\"userName\", us.name);\r",
									"        pm.collectionVariables.set(\"userEmail\", us.email);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Response have body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test user 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    var id = pm.collectionVariables.get(\"userId\");\r",
									"    pm.expect(jsonData.id, '\"id\" must be ' + id).to.eql(Number(id));\r",
									"});\r",
									"pm.test(\"Test user 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    var name = pm.collectionVariables.get(\"userName\");\r",
									"    pm.expect(jsonData.name, '\"name\" must be ' + name).to.eql(name);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{userName}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User update email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        user = rnd.getUser();\r",
									"        us = await api.addUser(user);\r",
									"        pm.collectionVariables.set(\"userId\", us.id);\r",
									"        us = rnd.getUser()\r",
									"        pm.collectionVariables.set(\"userName\", us.name);\r",
									"        pm.collectionVariables.set(\"userEmail\", us.email);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Response have body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test user 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    var id = pm.collectionVariables.get(\"userId\");\r",
									"    pm.expect(jsonData.id, '\"id\" must be ' + id).to.eql(Number(id));\r",
									"});\r",
									"pm.test(\"Test user 'email' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"    var email = pm.collectionVariables.get(\"userEmail\");\r",
									"    pm.expect(jsonData.email, '\"email\" must be ' + email).to.eql(email);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{userEmail}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User update with existing email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        user = rnd.getUser();\r",
									"        us = await api.addUser(user);\r",
									"        user2 = rnd.getUser();\r",
									"        us2 = await api.addUser(user2)\r",
									"        pm.collectionVariables.set(\"userId\", us2.id);\r",
									"        usa = rnd.getUser()\r",
									"        pm.collectionVariables.set(\"userName\", usa.name);\r",
									"        pm.collectionVariables.set(\"userEmail\", user.email);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([409, 500]);\r",
									"});\r",
									"pm.test(\"Response have body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{userName}}\",\n    \"email\": \"{{userEmail}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        user = rnd.getUser();\r",
									"        us = await api.addUser(user);\r",
									"        pm.collectionVariables.set(\"userId\", us.id);\r",
									"        pm.collectionVariables.set(\"userName\", us.name);\r",
									"        pm.collectionVariables.set(\"userEmail\", us.email);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Response have body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test user 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    var id = pm.collectionVariables.get(\"userId\");\r",
									"    pm.expect(jsonData.id, '\"id\" must be ' + id).to.eql(Number(id));\r",
									"});\r",
									"pm.test(\"Test user 'email' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"    var email = pm.collectionVariables.get(\"userEmail\");\r",
									"    pm.expect(jsonData.email, '\"email\" must be ' + email).to.eql(email);\r",
									"});\r",
									"pm.test(\"Test user 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    var name = pm.collectionVariables.get(\"userName\");\r",
									"    pm.expect(jsonData.name, '\"name\" must be ' + name).to.eql(name);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        user = rnd.getUser();\r",
									"        us = await api.addUser(user);\r",
									"        pm.collectionVariables.set(\"userId\", us.id);\r",
									"        pm.collectionVariables.set(\"userName\", us.name);\r",
									"        pm.collectionVariables.set(\"userEmail\", us.email);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "items",
			"item": [
				{
					"name": "Item create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        item = rnd.getItem();\r",
									"        pm.collectionVariables.set(\"item\", item);\r",
									"        pm.collectionVariables.set(\"itemName\", item.name);\r",
									"        pm.collectionVariables.set(\"itemAvailable\", item.available);\r",
									"        pm.collectionVariables.set(\"itemDescription\", item.description);\r",
									"        user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"userId\", user.id);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"pm.test(\"Response have body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"var item = pm.collectionVariables.get(\"item\");\r",
									"\r",
									"pm.test(\"Response data equal to request\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData).to.have.property('available');\r",
									"    pm.expect(jsonData.name, `\"name\" must be ${item.name}`).to.eql(item.name);\r",
									"    pm.expect(jsonData.description, `\"description\" must be ${item.description}`).to.eql(item.description);\r",
									"    pm.expect(jsonData.available.toString(), `\"available\" must be ${item.available}`).to.eql(item.available.toString());\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Sharer-User-Id",
								"value": "{{userId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{itemName}}\",\n    \"description\": \"{{itemDescription}}\",\n    \"available\": {{itemAvailable}}\n}"
						},
						"url": {
							"raw": "localhost:8080/items",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Item create without X-Sharer-User-Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        item = rnd.getItem();\r",
									"        pm.collectionVariables.set(\"item\", item);\r",
									"        pm.collectionVariables.set(\"itemName\", item.name);\r",
									"        pm.collectionVariables.set(\"itemAvailable\", item.available);\r",
									"        pm.collectionVariables.set(\"itemDescription\", item.description);\r",
									"        user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"userId\", user.id);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 or 500\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([500, 400]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Sharer-User-Id",
								"value": "{{userId}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{itemName}}\",\n    \"description\": \"{{itemDescription}}\",\n    \"available\": {{itemAvailable}}\n}"
						},
						"url": {
							"raw": "localhost:8080/items",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Item create with non-existent user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        item = rnd.getItem();\r",
									"        pm.collectionVariables.set(\"item\", item);\r",
									"        pm.collectionVariables.set(\"itemName\", item.name);\r",
									"        pm.collectionVariables.set(\"itemAvailable\", item.available);\r",
									"        pm.collectionVariables.set(\"itemDescription\", item.description);\r",
									"        user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"userId\", user.id + '1');\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Sharer-User-Id",
								"value": "{{userId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{itemName}}\",\n    \"description\": \"{{itemDescription}}\",\n    \"available\": {{itemAvailable}}\n}"
						},
						"url": {
							"raw": "localhost:8080/items",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Item create without available field",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        item = rnd.getItem();\r",
									"        pm.collectionVariables.set(\"item\", item);\r",
									"        pm.collectionVariables.set(\"itemName\", item.name);\r",
									"        pm.collectionVariables.set(\"itemAvailable\", item.available);\r",
									"        pm.collectionVariables.set(\"itemDescription\", item.description);\r",
									"        user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"userId\", user.id);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 500]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Sharer-User-Id",
								"value": "{{userId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{itemName}}\",\n    \"description\": \"{{itemDescription}}\"\n}"
						},
						"url": {
							"raw": "localhost:8080/items",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Item create with empty name field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 500]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "3",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"\",\n    \"description\": \"Аккумуляторная отвертка\",\n    \"available\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Item create with empty description field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 500]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "3",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Отвертка\",\n    \"available\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Item update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Response have body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"var item = pm.collectionVariables.get(\"item\");",
									"",
									"pm.test(\"Response data equal to request\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData).to.have.property('available');",
									"    pm.expect(jsonData.name, `\"name\" must be ${item.name}`).to.eql(item.name);",
									"    pm.expect(jsonData.description, `\"description\" must be ${item.description}`).to.eql(item.description);",
									"    pm.expect(jsonData.available.toString(), `\"available\" must be ${item.available}`).to.eql(item.available.toString());",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"userId\", user.id);\r",
									"        item = rnd.getItem();\r",
									"        var it = await api.addItem(item, user.id)\r",
									"        item = rnd.getItem();\r",
									"        pm.collectionVariables.set(\"item\", item);        \r",
									"        pm.collectionVariables.set(\"itemId\", it.id);\r",
									"        pm.collectionVariables.set(\"itemName\", item.name);\r",
									"        pm.collectionVariables.set(\"itemAvailable\", item.available);\r",
									"        pm.collectionVariables.set(\"itemDescription\", item.description);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "{{userId}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{itemName}}\",\n    \"description\": \"{{itemDescription}}\",\n    \"available\": {{itemAvailable}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/items/{{itemId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								"{{itemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Item update without  X-Sharer-User-Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([500, 400]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"userId\", user.id);\r",
									"        item = rnd.getItem();\r",
									"        var it = await api.addItem(item, user.id)\r",
									"        item = rnd.getItem();\r",
									"        pm.collectionVariables.set(\"item\", item);        \r",
									"        pm.collectionVariables.set(\"itemId\", it.id);\r",
									"        pm.collectionVariables.set(\"itemName\", item.name);\r",
									"        pm.collectionVariables.set(\"itemAvailable\", item.available);\r",
									"        pm.collectionVariables.set(\"itemDescription\", item.description);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "{{userId}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{itemName}}\",\n    \"description\": \"{{itemDescription}}\",\n    \"available\": {{itemAvailable}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/items/{{itemId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								"{{itemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Item update with other user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([404, 403]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"userId\", user.id + 1);\r",
									"        item = rnd.getItem();\r",
									"        var it = await api.addItem(item, user.id)\r",
									"        item = rnd.getItem();\r",
									"        pm.collectionVariables.set(\"item\", item);        \r",
									"        pm.collectionVariables.set(\"itemId\", it.id);\r",
									"        pm.collectionVariables.set(\"itemName\", item.name);\r",
									"        pm.collectionVariables.set(\"itemAvailable\", item.available);\r",
									"        pm.collectionVariables.set(\"itemDescription\", item.description);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "{{userId}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{itemName}}\",\n    \"description\": \"{{itemDescription}}\",\n    \"available\": {{itemAvailable}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/items/{{itemId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								"{{itemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Item update available field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Response have body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"var item = pm.collectionVariables.get(\"item\");",
									"",
									"pm.test(\"Response data equal to request\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('available');",
									"    pm.expect(jsonData.available.toString(), `\"available\" must be ${item.available}`).to.eql(item.available.toString());",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"userId\", user.id);\r",
									"        item = rnd.getItem();\r",
									"        var it = await api.addItem(item, user.id)\r",
									"        item = rnd.getItem();\r",
									"        pm.collectionVariables.set(\"item\", item);        \r",
									"        pm.collectionVariables.set(\"itemId\", it.id);\r",
									"        pm.collectionVariables.set(\"itemName\", item.name);\r",
									"        pm.collectionVariables.set(\"itemAvailable\", item.available);\r",
									"        pm.collectionVariables.set(\"itemDescription\", item.description);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "{{userId}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"available\": {{itemAvailable}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/items/{{itemId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								"{{itemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Item update description field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Response have body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"var item = pm.collectionVariables.get(\"item\");",
									"",
									"pm.test(\"Response data equal to request\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData).to.have.property('available');",
									"    pm.expect(jsonData.description, `\"description\" must be ${item.description}`).to.eql(item.description);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"userId\", user.id);\r",
									"        item = rnd.getItem();\r",
									"        var it = await api.addItem(item, user.id)\r",
									"        item = rnd.getItem();\r",
									"        pm.collectionVariables.set(\"item\", item);        \r",
									"        pm.collectionVariables.set(\"itemId\", it.id);\r",
									"        pm.collectionVariables.set(\"itemName\", item.name);\r",
									"        pm.collectionVariables.set(\"itemAvailable\", item.available);\r",
									"        pm.collectionVariables.set(\"itemDescription\", item.description);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "{{userId}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"{{itemDescription}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/items/{{itemId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								"{{itemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Item update name field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Response have body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"var item = pm.collectionVariables.get(\"item\");",
									"",
									"pm.test(\"Response data equal to request\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData).to.have.property('available');",
									"    pm.expect(jsonData.name, `\"name\" must be ${item.name}`).to.eql(item.name);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"userId\", user.id);\r",
									"        item = rnd.getItem();\r",
									"        var it = await api.addItem(item, user.id)\r",
									"        item = rnd.getItem();\r",
									"        pm.collectionVariables.set(\"item\", item);        \r",
									"        pm.collectionVariables.set(\"itemId\", it.id);\r",
									"        pm.collectionVariables.set(\"itemName\", item.name);\r",
									"        pm.collectionVariables.set(\"itemAvailable\", item.available);\r",
									"        pm.collectionVariables.set(\"itemDescription\", item.description);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "{{userId}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{itemName}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/items/{{itemId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								"{{itemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Item get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Response have body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"var item = pm.collectionVariables.get(\"item\");",
									"",
									"pm.test(\"Response data equal to request\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData).to.have.property('available');",
									"    pm.expect(jsonData.name, `\"name\" must be ${item.name}`).to.eql(item.name);",
									"    pm.expect(jsonData.description, `\"description\" must be ${item.description}`).to.eql(item.description);",
									"    pm.expect(jsonData.available.toString(), `\"available\" must be ${item.available}`).to.eql(item.available.toString());",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"userId\", user.id);\r",
									"        item = await api.addItem(rnd.getItem(), user.id)\r",
									"        pm.collectionVariables.set(\"item\", item);\r",
									"        pm.collectionVariables.set(\"itemId\", item.id);\r",
									"        pm.collectionVariables.set(\"itemName\", item.name);\r",
									"        pm.collectionVariables.set(\"itemAvailable\", item.available);\r",
									"        pm.collectionVariables.set(\"itemDescription\", item.description);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "3",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/items/{{itemId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								"{{itemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all items from user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Test list item response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"userId\", user.id);\r",
									"        await api.addItem(rnd.getItem(), user.id)\r",
									"        await api.addItem(rnd.getItem(), user.id)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "{{userId}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Item search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Test list item response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);",
									"    pm.expect(jsonData[0].name.toUpperCase(), 'Name should include ' + pm.collectionVariables.get(\"searchString\")).to.eql(pm.collectionVariables.get(\"searchString\"))",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"userId\", user.id);\r",
									"        it = rnd.getItem()\r",
									"        it.available = true\r",
									"        item = await api.addItem(it, user.id)\r",
									"        pm.collectionVariables.set(\"item\", item);\r",
									"        pm.collectionVariables.set(\"itemId\", item.id);\r",
									"        pm.collectionVariables.set(\"itemName\", item.name);\r",
									"        pm.collectionVariables.set(\"searchString\", item.name.toUpperCase());\r",
									"        pm.collectionVariables.set(\"itemAvailable\", item.available);\r",
									"        pm.collectionVariables.set(\"itemDescription\", item.description);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/items/search?text={{searchString}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								"search"
							],
							"query": [
								{
									"key": "text",
									"value": "{{searchString}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Item search unavailable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Test list item response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 0').to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"userId\", user.id);\r",
									"        it = rnd.getItem()\r",
									"        it.available = false\r",
									"        item = await api.addItem(it, user.id)\r",
									"        pm.collectionVariables.set(\"item\", item);\r",
									"        pm.collectionVariables.set(\"itemId\", item.id);\r",
									"        pm.collectionVariables.set(\"itemName\", item.name);\r",
									"        pm.collectionVariables.set(\"searchString\", item.name.toUpperCase());\r",
									"        pm.collectionVariables.set(\"itemAvailable\", item.available);\r",
									"        pm.collectionVariables.set(\"itemDescription\", item.description);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/items/search?text={{searchString}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								"search"
							],
							"query": [
								{
									"key": "text",
									"value": "{{searchString}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Item search empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Test search item response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 0').to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "1",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/items/search?text=",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								"search"
							],
							"query": [
								{
									"key": "text",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "bookings",
			"item": [
				{
					"name": "Booking unavailable item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 500]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        var moment = require('moment');\r",
									"        const currentDate = moment();\r",
									"        var start = currentDate.clone().add(1, 'days').format('YYYY-MM-DDTHH:mm:ss');\r",
									"        var end = currentDate.clone().add(2, 'days').format('YYYY-MM-DDTHH:mm:ss');\r",
									"        pm.collectionVariables.set('start', start);\r",
									"        pm.collectionVariables.set('end', end);\r",
									"        \r",
									"        user1 = await api.addUser(rnd.getUser());\r",
									"        user2 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"userId\", user2.id);\r",
									"        it = rnd.getItem()\r",
									"        it.available = false\r",
									"        item = await api.addItem(it, user1.id)\r",
									"        pm.collectionVariables.set(\"itemId\", item.id);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "{{userId}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": {{itemId}},\n    \"start\": \"{{start}}\",\n    \"end\": \"{{end}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/bookings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Booking create failed by wrong userId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([500, 404, 403]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        var moment = require('moment');\r",
									"        const currentDate = moment();\r",
									"        var start = currentDate.clone().add(1, 'days').format('YYYY-MM-DDTHH:mm:ss');\r",
									"        var end = currentDate.clone().add(2, 'days').format('YYYY-MM-DDTHH:mm:ss');\r",
									"        pm.collectionVariables.set('start', start);\r",
									"        pm.collectionVariables.set('end', end);\r",
									"        \r",
									"        user1 = await api.addUser(rnd.getUser());\r",
									"        user2 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"userId\", user2.id + 1);\r",
									"        it = rnd.getItem()\r",
									"        it.available = false\r",
									"        item = await api.addItem(it, user1.id)\r",
									"        pm.collectionVariables.set(\"itemId\", item.id);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "{{userId}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": {{itemId}},\n    \"start\": \"{{start}}\",\n    \"end\": \"{{end}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/bookings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Booking create failed by not found itemId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([404]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        var moment = require('moment');\r",
									"        const currentDate = moment();\r",
									"        var start = currentDate.clone().add(1, 'days').format('YYYY-MM-DDTHH:mm:ss');\r",
									"        var end = currentDate.clone().add(2, 'days').format('YYYY-MM-DDTHH:mm:ss');\r",
									"        pm.collectionVariables.set('start', start);\r",
									"        pm.collectionVariables.set('end', end);\r",
									"        \r",
									"        user1 = await api.addUser(rnd.getUser());\r",
									"        user2 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"userId\", user2.id);\r",
									"        it = rnd.getItem()\r",
									"        it.available = false\r",
									"        item = await api.addItem(it, user1.id)\r",
									"        pm.collectionVariables.set(\"itemId\", item.id + 1);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "{{userId}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": {{itemId}},\n    \"start\": \"{{start}}\",\n    \"end\": \"{{end}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/bookings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Booking create failed by end in past",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 500]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        var moment = require('moment');\r",
									"        const currentDate = moment();\r",
									"        var start = currentDate.clone().subtract(3, 'days').format('YYYY-MM-DDTHH:mm:ss');\r",
									"        var end = currentDate.clone().subtract(2, 'days').format('YYYY-MM-DDTHH:mm:ss');\r",
									"        pm.collectionVariables.set('start', start);\r",
									"        pm.collectionVariables.set('end', end);\r",
									"        \r",
									"        user1 = await api.addUser(rnd.getUser());\r",
									"        user2 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"userId\", user2.id);\r",
									"        it = rnd.getItem()\r",
									"        it.available = false\r",
									"        item = await api.addItem(it, user1.id)\r",
									"        pm.collectionVariables.set(\"itemId\", item.id);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "{{userId}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": {{itemId}},\n    \"start\": \"{{start}}\",\n    \"end\": \"{{end}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/bookings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Booking create failed by start equal end",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 500]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        var moment = require('moment');\r",
									"        const currentDate = moment();\r",
									"        var start = currentDate.clone().add(1, 'days').format('YYYY-MM-DDTHH:mm:ss');\r",
									"        var end = currentDate.clone().add(1, 'days').format('YYYY-MM-DDTHH:mm:ss');\r",
									"        pm.collectionVariables.set('start', start);\r",
									"        pm.collectionVariables.set('end', end);\r",
									"        \r",
									"        user1 = await api.addUser(rnd.getUser());\r",
									"        user2 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"userId\", user2.id);\r",
									"        it = rnd.getItem()\r",
									"        it.available = false\r",
									"        item = await api.addItem(it, user1.id)\r",
									"        pm.collectionVariables.set(\"itemId\", item.id);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "{{userId}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": {{itemId}},\n    \"start\": \"{{start}}\",\n    \"end\": \"{{end}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/bookings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Booking create failed by start equal null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 500]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"var start = moment().add(2, 'd');\r",
									"pm.environment.set('start_null', start.format('YYYY-MM-DDTHH:mm:ss'));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "{{userId}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": {{itemId}},\n    \"end\": \"{{end}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/bookings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Booking create failed by end equal null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 500]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"var start = moment().add(2, 'd');\r",
									"pm.environment.set('end_null', start.format('YYYY-MM-DDTHH:mm:ss'));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "{{userId}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": {{itemId}},\n    \"start\": \"{{start}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/bookings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Booking create failed by start in past",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 500]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        var moment = require('moment');\r",
									"        const currentDate = moment();\r",
									"        var start = currentDate.clone().subtract(1, 'days').format('YYYY-MM-DDTHH:mm:ss');\r",
									"        var end = currentDate.clone().add(2, 'days').format('YYYY-MM-DDTHH:mm:ss');\r",
									"        pm.collectionVariables.set('start', start);\r",
									"        pm.collectionVariables.set('end', end);\r",
									"        \r",
									"        user1 = await api.addUser(rnd.getUser());\r",
									"        user2 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"userId\", user2.id);\r",
									"        it = rnd.getItem()\r",
									"        it.available = false\r",
									"        item = await api.addItem(it, user1.id)\r",
									"        pm.collectionVariables.set(\"itemId\", item.id);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "{{userId}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": {{itemId}},\n    \"start\": \"{{start}}\",\n    \"end\": \"{{end}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/bookings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Booking available item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Has booking create response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"var item = pm.collectionVariables.get('item')",
									"var user1 = pm.collectionVariables.get('user1')",
									"var user2 = pm.collectionVariables.get('user2')",
									"var start = pm.collectionVariables.get('start')",
									"var end = pm.collectionVariables.get('end')",
									"pm.test(\"Test booking 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('start');",
									"    pm.expect(jsonData.start, '\"start\"  must be \"' + pm.collectionVariables.get('start') + '\"').to.eql(pm.collectionVariables.get('start'));",
									"});",
									"pm.test(\"Test booking 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('end');",
									"    pm.expect(jsonData.end, '\"end\"  must be \"' + pm.collectionVariables.get('end') + '\"').to.eql(pm.collectionVariables.get('end'));",
									"});",
									"pm.test(\"Test booking 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status, '\"status\" must be \"WAITING\"').to.eql('WAITING');",
									"});",
									"pm.test(\"Test booking 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('booker');",
									"    pm.expect(jsonData.booker).to.have.property('id');",
									"    pm.expect(jsonData.booker.id, '\"booker.id\"  must be ${user2.id}').to.eql(user2.id);",
									"});",
									"pm.test(\"Test booking 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('id');",
									"    pm.expect(jsonData.item.id, '\"item.id\"  must be ${item.id}').to.eql(item.id);",
									"});",
									"pm.test(\"Test booking 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('name');",
									"    pm.expect(jsonData.item.name, '\"item.name\"  must be ${item.name}').to.eql(item.name);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        var moment = require('moment');\r",
									"        const currentDate = moment();\r",
									"        var start = currentDate.clone().add(1, 'days').format('YYYY-MM-DDTHH:mm:ss');\r",
									"        var end = currentDate.clone().add(2, 'days').format('YYYY-MM-DDTHH:mm:ss');\r",
									"        pm.collectionVariables.set('start', start);\r",
									"        pm.collectionVariables.set('end', end);\r",
									"        \r",
									"        user1 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"user1\", user1);\r",
									"        user2 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"user2\", user2);\r",
									"        pm.collectionVariables.set(\"userId\", user2.id);\r",
									"        it = rnd.getItem()\r",
									"        it.available = true\r",
									"        item = await api.addItem(it, user1.id)\r",
									"        pm.collectionVariables.set(\"itemId\", item.id);\r",
									"        pm.collectionVariables.set(\"item\", item);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "{{userId}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": {{itemId}},\n    \"start\": \"{{start}}\",\n    \"end\": \"{{end}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/bookings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Booking approve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"pm.test(\"Has booking patch response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"var item = pm.collectionVariables.get('item')",
									"var book = pm.collectionVariables.get('booking')",
									"var user1 = pm.collectionVariables.get('user1')",
									"var user2 = pm.collectionVariables.get('user2')",
									"pm.test(\"Test booking 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be ${book.id}').to.eql(book.id);",
									"});",
									"pm.test(\"Test booking 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('start');",
									"    pm.expect(jsonData.start, '\"start\"  must be \"' + pm.collectionVariables.get('start') + '\"').to.eql(pm.collectionVariables.get('start'));",
									"});",
									"pm.test(\"Test booking 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('end');",
									"    pm.expect(jsonData.end, '\"end\"  must be \"' + pm.collectionVariables.get('end') + '\"').to.eql(pm.collectionVariables.get('end'));",
									"});",
									"pm.test(\"Test booking 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status, '\"status\" must be \"APPROVED\"').to.eql('APPROVED');",
									"});",
									"pm.test(\"Test booking 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('booker');",
									"    pm.expect(jsonData.booker).to.have.property('id');",
									"    pm.expect(jsonData.booker.id, '\"booker.id\"  must be ${user2.id}').to.eql(user2.id);",
									"});",
									"pm.test(\"Test booking 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('id');",
									"    pm.expect(jsonData.item.id, '\"item.id\"  must be ${item.id}').to.eql(item.id);",
									"});",
									"pm.test(\"Test booking 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('name');",
									"    pm.expect(jsonData.item.name, '\"item.name\"  must be ${item.name}').to.eql(item.name);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        var moment = require('moment');\r",
									"        const currentDate = moment();\r",
									"        var start = currentDate.clone().add(1, 'days').format('YYYY-MM-DDTHH:mm:ss');\r",
									"        var end = currentDate.clone().add(2, 'days').format('YYYY-MM-DDTHH:mm:ss');\r",
									"        pm.collectionVariables.set('start', start);\r",
									"        pm.collectionVariables.set('end', end);\r",
									"        \r",
									"        user1 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"user1\", user1);\r",
									"        user2 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"user2\", user2);\r",
									"        pm.collectionVariables.set(\"userId\", user1.id);\r",
									"        it = rnd.getItem()\r",
									"        it.available = true\r",
									"        item = await api.addItem(it, user1.id)\r",
									"        pm.collectionVariables.set(\"itemId\", item.id);\r",
									"        pm.collectionVariables.set(\"item\", item);\r",
									"        book = await api.addBooking(rnd.getBooking(item.id, start, end), user2.id)\r",
									"        pm.collectionVariables.set(\"bookingId\", book.id);\r",
									"        pm.collectionVariables.set(\"booking\", book);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "{{userId}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings/{{bookingId}}?approved=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings",
								"{{bookingId}}"
							],
							"query": [
								{
									"key": "approved",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Booking approve by wrong user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 403, 500]);",
									"});",
									"pm.test(\"Has booking patch response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        var moment = require('moment');\r",
									"        const currentDate = moment();\r",
									"        var start = currentDate.clone().add(1, 'days').format('YYYY-MM-DDTHH:mm:ss');\r",
									"        var end = currentDate.clone().add(2, 'days').format('YYYY-MM-DDTHH:mm:ss');\r",
									"        pm.collectionVariables.set('start', start);\r",
									"        pm.collectionVariables.set('end', end);\r",
									"        \r",
									"        user1 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"user1\", user1);\r",
									"        user2 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"user2\", user2);\r",
									"        pm.collectionVariables.set(\"userId\", user1.id + 2);\r",
									"        it = rnd.getItem()\r",
									"        it.available = true\r",
									"        item = await api.addItem(it, user1.id)\r",
									"        pm.collectionVariables.set(\"itemId\", item.id);\r",
									"        pm.collectionVariables.set(\"item\", item);\r",
									"        book = await api.addBooking(rnd.getBooking(item.id, start, end), user2.id)\r",
									"        pm.collectionVariables.set(\"bookingId\", book.id);\r",
									"        pm.collectionVariables.set(\"booking\", book);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "{{userId}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings/{{bookingId}}?approved=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings",
								"{{bookingId}}"
							],
							"query": [
								{
									"key": "approved",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get booking by booker",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Has booking create response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"var item = pm.collectionVariables.get('item')",
									"var user1 = pm.collectionVariables.get('user1')",
									"var user2 = pm.collectionVariables.get('user2')",
									"var start = pm.collectionVariables.get('start')",
									"var end = pm.collectionVariables.get('end')",
									"pm.test(\"Test booking 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('start');",
									"    pm.expect(jsonData.start, '\"start\"  must be \"' + pm.collectionVariables.get('start') + '\"').to.eql(pm.collectionVariables.get('start'));",
									"});",
									"pm.test(\"Test booking 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('end');",
									"    pm.expect(jsonData.end, '\"end\"  must be \"' + pm.collectionVariables.get('end') + '\"').to.eql(pm.collectionVariables.get('end'));",
									"});",
									"pm.test(\"Test booking 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status, '\"status\" must be \"WAITING\"').to.eql('WAITING');",
									"});",
									"pm.test(\"Test booking 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('booker');",
									"    pm.expect(jsonData.booker).to.have.property('id');",
									"    pm.expect(jsonData.booker.id, '\"booker.id\"  must be ${user2.id}').to.eql(user2.id);",
									"});",
									"pm.test(\"Test booking 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('id');",
									"    pm.expect(jsonData.item.id, '\"item.id\"  must be ${item.id}').to.eql(item.id);",
									"});",
									"pm.test(\"Test booking 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('name');",
									"    pm.expect(jsonData.item.name, '\"item.name\"  must be ${item.name}').to.eql(item.name);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        var moment = require('moment');\r",
									"        const currentDate = moment();\r",
									"        var start = currentDate.clone().add(1, 'days').format('YYYY-MM-DDTHH:mm:ss');\r",
									"        var end = currentDate.clone().add(2, 'days').format('YYYY-MM-DDTHH:mm:ss');\r",
									"        pm.collectionVariables.set('start', start);\r",
									"        pm.collectionVariables.set('end', end);\r",
									"        \r",
									"        user1 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"user1\", user1);\r",
									"        user2 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"user2\", user2);\r",
									"        pm.collectionVariables.set(\"userId\", user2.id);\r",
									"        it = rnd.getItem()\r",
									"        it.available = true\r",
									"        item = await api.addItem(it, user1.id)\r",
									"        pm.collectionVariables.set(\"itemId\", item.id);\r",
									"        pm.collectionVariables.set(\"item\", item);\r",
									"        book = await api.addBooking(rnd.getBooking(item.id, start, end), user2.id)\r",
									"        pm.collectionVariables.set(\"bookingId\", book.id);\r",
									"        pm.collectionVariables.set(\"booking\", book);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "{{userId}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings/{{bookingId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get booking by owner",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Has booking create response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"var item = pm.collectionVariables.get('item')",
									"var user1 = pm.collectionVariables.get('user1')",
									"var user2 = pm.collectionVariables.get('user2')",
									"var start = pm.collectionVariables.get('start')",
									"var end = pm.collectionVariables.get('end')",
									"pm.test(\"Test booking 'start' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('start');",
									"    pm.expect(jsonData.start, '\"start\"  must be \"' + pm.collectionVariables.get('start') + '\"').to.eql(pm.collectionVariables.get('start'));",
									"});",
									"pm.test(\"Test booking 'end' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('end');",
									"    pm.expect(jsonData.end, '\"end\"  must be \"' + pm.collectionVariables.get('end') + '\"').to.eql(pm.collectionVariables.get('end'));",
									"});",
									"pm.test(\"Test booking 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status, '\"status\" must be \"WAITING\"').to.eql('WAITING');",
									"});",
									"pm.test(\"Test booking 'booker.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('booker');",
									"    pm.expect(jsonData.booker).to.have.property('id');",
									"    pm.expect(jsonData.booker.id, '\"booker.id\"  must be ${user2.id}').to.eql(user2.id);",
									"});",
									"pm.test(\"Test booking 'item.id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('id');",
									"    pm.expect(jsonData.item.id, '\"item.id\"  must be ${item.id}').to.eql(item.id);",
									"});",
									"pm.test(\"Test booking 'item.name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('name');",
									"    pm.expect(jsonData.item.name, '\"item.name\"  must be ${item.name}').to.eql(item.name);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        var moment = require('moment');\r",
									"        const currentDate = moment();\r",
									"        var start = currentDate.clone().add(1, 'days').format('YYYY-MM-DDTHH:mm:ss');\r",
									"        var end = currentDate.clone().add(2, 'days').format('YYYY-MM-DDTHH:mm:ss');\r",
									"        pm.collectionVariables.set('start', start);\r",
									"        pm.collectionVariables.set('end', end);\r",
									"        \r",
									"        user1 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"user1\", user1);\r",
									"        user2 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"user2\", user2);\r",
									"        pm.collectionVariables.set(\"userId\", user2.id);\r",
									"        it = rnd.getItem()\r",
									"        it.available = true\r",
									"        item = await api.addItem(it, user1.id)\r",
									"        pm.collectionVariables.set(\"itemId\", item.id);\r",
									"        pm.collectionVariables.set(\"item\", item);\r",
									"        book = await api.addBooking(rnd.getBooking(item.id, start, end), user2.id)\r",
									"        pm.collectionVariables.set(\"bookingId\", book.id);\r",
									"        pm.collectionVariables.set(\"booking\", book);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "{{userId}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings/{{bookingId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all bookings from wrong user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([500,404,403]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        user2 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"userId\", user2.id + 1);\r",
									"\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "{{userId}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings/owner",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings",
								"owner"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all user bookings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Has booking patch response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"var item = pm.collectionVariables.get('item')",
									"var book = pm.collectionVariables.get('booking')",
									"var user1 = pm.collectionVariables.get('user1')",
									"var user2 = pm.collectionVariables.get('user2')",
									"var jsonData = pm.response.json()[0];",
									"",
									"pm.test(\"Test booking 'id' field\", function () {",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be ${book.id}').to.eql(book.id);",
									"});",
									"pm.test(\"Test booking 'start' field\", function () {",
									"    pm.expect(jsonData).to.have.property('start');",
									"    pm.expect(jsonData.start, '\"start\"  must be \"' + pm.collectionVariables.get('start') + '\"').to.eql(pm.collectionVariables.get('start'));",
									"});",
									"pm.test(\"Test booking 'end' field\", function () {",
									"    pm.expect(jsonData).to.have.property('end');",
									"    pm.expect(jsonData.end, '\"end\"  must be \"' + pm.collectionVariables.get('end') + '\"').to.eql(pm.collectionVariables.get('end'));",
									"});",
									"pm.test(\"Test booking 'status' field\", function () {",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status, '\"status\" must be \"WAITING\"').to.eql('WAITING');",
									"});",
									"pm.test(\"Test booking 'booker.id' field\", function () {",
									"    pm.expect(jsonData).to.have.property('booker');",
									"    pm.expect(jsonData.booker).to.have.property('id');",
									"    pm.expect(jsonData.booker.id, '\"booker.id\"  must be ${user2.id}').to.eql(user2.id);",
									"});",
									"pm.test(\"Test booking 'item.id' field\", function () {",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('id');",
									"    pm.expect(jsonData.item.id, '\"item.id\"  must be ${item.id}').to.eql(item.id);",
									"});",
									"pm.test(\"Test booking 'item.name' field\", function () {",
									"    pm.expect(jsonData).to.have.property('item');",
									"    pm.expect(jsonData.item).to.have.property('name');",
									"    pm.expect(jsonData.item.name, '\"item.name\"  must be ${item.name}').to.eql(item.name);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        var moment = require('moment');\r",
									"        const currentDate = moment();\r",
									"        var start = currentDate.clone().add(1, 'days').format('YYYY-MM-DDTHH:mm:ss');\r",
									"        var end = currentDate.clone().add(2, 'days').format('YYYY-MM-DDTHH:mm:ss');\r",
									"        pm.collectionVariables.set('start', start);\r",
									"        pm.collectionVariables.set('end', end);\r",
									"        \r",
									"        user1 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"user1\", user1);\r",
									"        user2 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"user2\", user2);\r",
									"        pm.collectionVariables.set(\"userId\", user2.id);\r",
									"        it = rnd.getItem()\r",
									"        it.available = true\r",
									"        item = await api.addItem(it, user1.id)\r",
									"        pm.collectionVariables.set(\"itemId\", item.id);\r",
									"        pm.collectionVariables.set(\"item\", item);\r",
									"        book = await api.addBooking(rnd.getBooking(item.id, start, end), user2.id)\r",
									"        pm.collectionVariables.set(\"bookingId\", book.id);\r",
									"        pm.collectionVariables.set(\"booking\", book);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "{{userId}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "comments",
			"item": [
				{
					"name": "Comment past booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Response have body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"var item = pm.collectionVariables.get(\"item\");",
									"var user1 = pm.collectionVariables.get(\"user1\");",
									"var user2 = pm.collectionVariables.get(\"user2\");",
									"var text = pm.collectionVariables.get(\"commentText\")",
									"pm.test(\"Response data equal to request\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('text');",
									"    pm.expect(jsonData).to.have.property('authorName');",
									"    pm.expect(jsonData).to.have.property('created');",
									"    pm.expect(jsonData.text, `\"text\" must be ` +  text).to.eql(text);",
									"    pm.expect(jsonData.authorName, `\"authorName\" must be ${user2.name}`).to.eql(user2.name);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        var moment = require('moment');\r",
									"        const currentDate = moment();\r",
									"        var start = currentDate.clone().add(1, 'seconds').format('YYYY-MM-DDTHH:mm:ss');\r",
									"        var end = currentDate.clone().add(2, 'seconds').format('YYYY-MM-DDTHH:mm:ss');\r",
									"        pm.collectionVariables.set('start', start);\r",
									"        pm.collectionVariables.set('end', end);\r",
									"        \r",
									"        user1 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"user1\", user1);\r",
									"        user2 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"user2\", user2);\r",
									"        pm.collectionVariables.set(\"userId\", user2.id);\r",
									"        it = rnd.getItem()\r",
									"        it.available = true\r",
									"        item = await api.addItem(it, user1.id)\r",
									"        pm.collectionVariables.set(\"itemId\", item.id);\r",
									"        pm.collectionVariables.set(\"item\", item);\r",
									"        book = await api.addBooking(rnd.getBooking(item.id, start, end), user2.id)\r",
									"        await api.approveBooking(book.id, user1.id)\r",
									"        pm.collectionVariables.set(\"bookingId\", book.id);\r",
									"        pm.collectionVariables.set(\"booking\", book);\r",
									"        pm.collectionVariables.set(\"commentText\", rnd.getWord(50));\r",
									"        setTimeout(function(){}, 3000);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							},
							{
								"key": "X-Sharer-User-Id",
								"value": "{{userId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"{{commentText}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/items/{{itemId}}/comment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								"{{itemId}}",
								"comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment approved booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 500])",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        var moment = require('moment');\r",
									"        const currentDate = moment();\r",
									"        var start = currentDate.clone().add(1, 'seconds').format('YYYY-MM-DDTHH:mm:ss');\r",
									"        var end = currentDate.clone().add(2, 'seconds').format('YYYY-MM-DDTHH:mm:ss');\r",
									"        pm.collectionVariables.set('start', start);\r",
									"        pm.collectionVariables.set('end', end);\r",
									"        \r",
									"        user1 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"user1\", user1);\r",
									"        user2 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"user2\", user2);\r",
									"        pm.collectionVariables.set(\"userId\", user2.id);\r",
									"        it = rnd.getItem()\r",
									"        it.available = true\r",
									"        item = await api.addItem(it, user1.id)\r",
									"        pm.collectionVariables.set(\"itemId\", item.id);\r",
									"        pm.collectionVariables.set(\"item\", item);\r",
									"        book = await api.addBooking(rnd.getBooking(item.id, start, end), user2.id)\r",
									"        await api.approveBooking(book.id, user1.id)\r",
									"        pm.collectionVariables.set(\"bookingId\", book.id);\r",
									"        pm.collectionVariables.set(\"booking\", book);\r",
									"        pm.collectionVariables.set(\"commentText\", rnd.getWord(50));\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							},
							{
								"key": "X-Sharer-User-Id",
								"value": "{{userId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"{{commentText}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/items/{{itemId}}/comment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								"{{itemId}}",
								"comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get item with comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Has item create response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test item 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"});",
									"pm.test(\"Test item 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"});",
									"pm.test(\"Test item 'description' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('description');",
									"});",
									"pm.test(\"Test item 'available' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('available');",
									"});",
									"pm.test(\"Test item 'lastBooking' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('lastBooking');",
									"    pm.expect(jsonData.lastBooking, '\"lastBooking\" must be \"null\"').null;",
									"});",
									"pm.test(\"Test item 'nextBooking' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('nextBooking');",
									"    pm.expect(jsonData.nextBooking, '\"nextBooking\" must be \"null\"').null;",
									"});",
									"pm.test(\"Test item 'comments' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('comments');",
									"    pm.expect(jsonData.comments.length, 'length of \"comments\" must be \"1\"').to.eql(1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        var moment = require('moment');\r",
									"        const currentDate = moment();\r",
									"        var start = currentDate.clone().add(1, 'seconds').format('YYYY-MM-DDTHH:mm:ss');\r",
									"        var end = currentDate.clone().add(2, 'seconds').format('YYYY-MM-DDTHH:mm:ss');\r",
									"        pm.collectionVariables.set('start', start);\r",
									"        pm.collectionVariables.set('end', end);\r",
									"        \r",
									"        user1 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"user1\", user1);\r",
									"        user2 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"user2\", user2);\r",
									"        pm.collectionVariables.set(\"userId\", user2.id);\r",
									"        it = rnd.getItem()\r",
									"        it.available = true\r",
									"        item = await api.addItem(it, user1.id)\r",
									"        pm.collectionVariables.set(\"itemId\", item.id);\r",
									"        pm.collectionVariables.set(\"item\", item);\r",
									"        book = await api.addBooking(rnd.getBooking(item.id, start, end), user2.id)\r",
									"        await api.approveBooking(book.id, user1.id)\r",
									"        pm.collectionVariables.set(\"bookingId\", book.id);\r",
									"        pm.collectionVariables.set(\"booking\", book);\r",
									"        pm.collectionVariables.set(\"commentText\", rnd.getWord(50));\r",
									"        pausecomp(3000);\r",
									"        await api.getBooking(book.id, user1.id)\r",
									"        comment = await api.addComment({\"text\": rnd.getWord(50)}, item.id, user2.id)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"function pausecomp(millis)\r",
									" {\r",
									"  var date = new Date();\r",
									"  var curDate = null;\r",
									"  do { curDate = new Date(); }\r",
									"  while(curDate-date < millis);\r",
									"}\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "{{userId}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/items/{{itemId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								"{{itemId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"API = class {\r",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {\r",
					"        this.baseUrl = baseUrl;\r",
					"        this.pm = postman;\r",
					"        this._verbose = verbose;\r",
					"    }\r",
					"\r",
					"    async addUser(user, id=0, verbose=null) {\r",
					"        return this.post(\"/users\", user, id, \"Ошибка при добавлении нового пользователя: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addItem(item, id=0, verbose=null) {\r",
					"        return this.post(\"/items\", item, id, \"Ошибка при добавлении новой вещи: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addBooking(booking, id=0, verbose=null) {\r",
					"        return this.post(\"/bookings\", booking, id, \"Ошибка при добавлении нового бронирования: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addComment(comment, itemId, id=0, verbose=null) {\r",
					"        return this.post(\"/items/\" + itemId + \"/comment\", comment, id, \"Ошибка при добавлении нового комментария: \", verbose);\r",
					"    }\r",
					"\r",
					"    async getBooking(bookingId, id=0, verbose=null) {\r",
					"        return this.get(\"/bookings/\"+bookingId, {}, id, \"Ошибка при получении информации о бронировании: \", verbose);\r",
					"    }\r",
					"\r",
					"    async approveBooking(bookingId, id=0, verbose=null) {\r",
					"        return this.patch(\"/bookings/\"+bookingId+\"?approved=true\", {}, id, \"Ошибка при подтверждении бронирования: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addRequest(request, id=0, verbose=null) {\r",
					"        return this.post(\"/requests\", request, id, \"Ошибка при добавлении нового запроса: \", verbose);\r",
					"    }\r",
					"    \r",
					"    async post(path, body, id=0, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"POST\", path, body, id, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async patch(path, body = null, id=0, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"PATCH\", path, body, id, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async get(path, body = null, id=0, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"GET\", path, body, id, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async put(path, body = null, id=0, errorText = \"Ошибка при выполнении put-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"PUT\", path, body, id, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async delete(path, body = null, id=0, errorText = \"Ошибка при выполнении delte-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"DELETE\", path, body, id, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async sendRequest(method, path, body=null, id=0, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {\r",
					"        return new Promise((resolve, reject) => {\r",
					"            verbose = verbose == null ? this._verbose : verbose;\r",
					"            var req = {};\r",
					"            if (id == 0){\r",
					"                req = {\r",
					"                    url: this.baseUrl + path,\r",
					"                    method: method,\r",
					"                    body: body == null ? \"\" : JSON.stringify(body),\r",
					"                    header: { \"Content-Type\": \"application/json\"},\r",
					"                };\r",
					"            }else{\r",
					"                req = {\r",
					"                    url: this.baseUrl + path,\r",
					"                    method: method,\r",
					"                    body: body == null ? \"\" : JSON.stringify(body),\r",
					"                    header: [{\r",
					"                        \"key\": \"X-Sharer-User-Id\",\r",
					"                        \"value\": id,\r",
					"                        \"type\": \"text\",\r",
					"                    },\r",
					"                    {\r",
					"                        \"key\": \"Content-Type\",\r",
					"                        \"name\": \"Content-Type\",\r",
					"                        \"value\": \"application/json\",\r",
					"                        \"type\": \"text\"\r",
					"                    }]\r",
					"                };\r",
					"            }\r",
					"            if(verbose) {\r",
					"                console.log(\"Отправляю запрос: \", req);\r",
					"            }\r",
					"\r",
					"            try {\r",
					"                this.pm.sendRequest(req, (error, response) => {\r",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {\r",
					"                        let err = error ? error : JSON.stringify(response.json());\r",
					"                        console.error(\"При выполнении запроса к серверу возникла ошибка.\\n\", err,\r",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + \r",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));\r",
					"\r",
					"                        reject(new Error(errorText + err));\r",
					"                    }\r",
					"                    if(verbose) {\r",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());\r",
					"                    }\r",
					"                    if (response.stream.length === 0){\r",
					"                        resolve(null);\r",
					"                    }else{\r",
					"                        resolve(response.json());\r",
					"                    }\r",
					"                });\r",
					"                \r",
					"            } catch(err) {\r",
					"                if(verbose) {\r",
					"                    console.error(errorText, err);\r",
					"                }\r",
					"                return Promise.reject(err);\r",
					"            }\r",
					"        });\r",
					"    }\r",
					"};\r",
					"\r",
					"RandomUtils = class {\r",
					"    constructor() {}\r",
					"\r",
					"    getUser() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),\r",
					"            email: pm.variables.replaceIn('{{$randomEmail}}'),\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getRequest() {\r",
					"        return {\r",
					"            description: this.getWord(50)\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getBooking(id, startBook, endBook) {\r",
					"        return {\r",
					"          itemId: id, \r",
					"          start: startBook,\r",
					"          end: endBook \r",
					"        };\r",
					"    }\r",
					"\r",
					"    getItem() {\r",
					"        return {\r",
					"            name: this.getWord(10),\r",
					"            description: this.getWord(50),\r",
					"            available: pm.variables.replaceIn('{{$randomBoolean}}')\t\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getItemForRequest(id) {\r",
					"        return {\r",
					"            name: this.getWord(10),\r",
					"            description: this.getWord(50),\r",
					"            available: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            requestId: id\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getFilm(director=null) {\r",
					"        let date = new Date(new Date(1960, 0, 1).getTime() + Math.random() * (new Date(2010, 0, 1).getTime() - new Date(1960, 0, 1).getTime()));\r",
					"        var toReturn = {\r",
					"            name: this.getWord(15),\r",
					"            description: this.getWord(50),\r",
					"            releaseDate: date.toISOString().slice(0,10),\r",
					"            duration: Math.floor(Math.random() * (180 - 60 + 1) + 60),\r",
					"            mpa: { id: Math.floor(Math.random() * (5 - 1 + 1) + 1)},\r",
					"            genres: [{ id: Math.floor(Math.random() * (6 - 1 + 1) + 1)}]\r",
					"        };\r",
					"        if (director!==null)\r",
					"            toReturn.directors = [{ id: director.id}];\r",
					"        return toReturn;\r",
					"    }\r",
					"\r",
					"\r",
					"    getWord(length = 1) {\r",
					"        let result = '';\r",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
					"        const charactersLength = characters.length;\r",
					"        let counter = 0;\r",
					"        while (counter < length) {\r",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
					"            counter += 1;\r",
					"        }\r",
					"        return result;\r",
					"    }\r",
					"\r",
					"        getName(length = 1) {\r",
					"        let result = '';\r",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
					"        const charactersLength = characters.length;\r",
					"        let counter = 0;\r",
					"        while (counter < length) {\r",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
					"            counter += 1;\r",
					"        }\r",
					"        return result;\r",
					"    }\r",
					"\r",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		},
		{
			"key": "userName",
			"value": ""
		},
		{
			"key": "userEmail",
			"value": ""
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "item",
			"value": ""
		},
		{
			"key": "itemName",
			"value": ""
		},
		{
			"key": "itemAvailable",
			"value": ""
		},
		{
			"key": "itemDescription",
			"value": ""
		},
		{
			"key": "itemId",
			"value": ""
		},
		{
			"key": "searchString",
			"value": ""
		},
		{
			"key": "start",
			"value": ""
		},
		{
			"key": "end",
			"value": ""
		},
		{
			"key": "user1",
			"value": ""
		},
		{
			"key": "user2",
			"value": ""
		},
		{
			"key": "bookingId",
			"value": ""
		},
		{
			"key": "booking",
			"value": ""
		},
		{
			"key": "commentText",
			"value": ""
		}
	]
}
